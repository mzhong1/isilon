/*
 * Isilon SDK
 *
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use std::borrow::Borrow;
use std::rc::Rc;

use futures;
use futures::Future;
use hyper;

use super::{configuration, Error};
#[cfg(feature = "client")]
pub struct DebugApiClient<C: hyper::client::connect::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}
#[cfg(feature = "client")]
impl<C: hyper::client::connect::Connect> DebugApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> DebugApiClient<C> {
        DebugApiClient {
            configuration: configuration,
        }
    }
}

pub trait DebugApi {
    fn delete_debug_stats(&self) -> Box<dyn Future<Output = Result<(), Error>>>;
    fn get_debug_stats(&self)
        -> Box<dyn Future<Output = Result<crate::models::DebugStats, Error>>>;
}

#[cfg(feature = "client")]
impl<C: hyper::client::connect::Connect + 'static> DebugApi for DebugApiClient<C> {
    fn delete_debug_stats(&self) -> Box<dyn Future<Output = Result<(), Error>>> {
        let uri_str = format!("{}/platform/1/debug/stats", self.configuration.base_path);
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::DELETE,
        )
    }

    fn get_debug_stats(
        &self,
    ) -> Box<dyn Future<Output = Result<crate::models::DebugStats, Error>>> {
        let uri_str = format!("{}/platform/1/debug/stats", self.configuration.base_path);
        query(
            self.configuration.borrow(),
            &uri_str,
            &"",
            hyper::Method::GET,
        )
    }
}
